package com.sqlite.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.exp.sign.Wenxue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WENXUE".
*/
public class WenxueDao extends AbstractDao<Wenxue, Long> {

    public static final String TABLENAME = "WENXUE";

    /**
     * Properties of entity Wenxue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Sj = new Property(1, String.class, "sj", false, "SJ");
        public final static Property Dd = new Property(2, String.class, "dd", false, "DD");
        public final static Property Ms = new Property(3, String.class, "ms", false, "MS");
        public final static Property Mc = new Property(4, String.class, "mc", false, "MC");
        public final static Property Tp = new Property(5, String.class, "tp", false, "TP");
        public final static Property Fx = new Property(6, String.class, "fx", false, "FX");
        public final static Property Zz = new Property(7, String.class, "zz", false, "ZZ");
        public final static Property Fp = new Property(8, String.class, "fp", false, "FP");
        public final static Property Lat = new Property(9, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(10, double.class, "lng", false, "LNG");
    }


    public WenxueDao(DaoConfig config) {
        super(config);
    }
    
    public WenxueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WENXUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SJ\" TEXT," + // 1: sj
                "\"DD\" TEXT," + // 2: dd
                "\"MS\" TEXT," + // 3: ms
                "\"MC\" TEXT," + // 4: mc
                "\"TP\" TEXT," + // 5: tp
                "\"FX\" TEXT," + // 6: fx
                "\"ZZ\" TEXT," + // 7: zz
                "\"FP\" TEXT," + // 8: fp
                "\"LAT\" REAL NOT NULL ," + // 9: lat
                "\"LNG\" REAL NOT NULL );"); // 10: lng
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WENXUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Wenxue entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String sj = entity.getSj();
        if (sj != null) {
            stmt.bindString(2, sj);
        }
 
        String dd = entity.getDd();
        if (dd != null) {
            stmt.bindString(3, dd);
        }
 
        String ms = entity.getMs();
        if (ms != null) {
            stmt.bindString(4, ms);
        }
 
        String mc = entity.getMc();
        if (mc != null) {
            stmt.bindString(5, mc);
        }
 
        String tp = entity.getTp();
        if (tp != null) {
            stmt.bindString(6, tp);
        }
 
        String fx = entity.getFx();
        if (fx != null) {
            stmt.bindString(7, fx);
        }
 
        String zz = entity.getZz();
        if (zz != null) {
            stmt.bindString(8, zz);
        }
 
        String fp = entity.getFp();
        if (fp != null) {
            stmt.bindString(9, fp);
        }
        stmt.bindDouble(10, entity.getLat());
        stmt.bindDouble(11, entity.getLng());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Wenxue entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String sj = entity.getSj();
        if (sj != null) {
            stmt.bindString(2, sj);
        }
 
        String dd = entity.getDd();
        if (dd != null) {
            stmt.bindString(3, dd);
        }
 
        String ms = entity.getMs();
        if (ms != null) {
            stmt.bindString(4, ms);
        }
 
        String mc = entity.getMc();
        if (mc != null) {
            stmt.bindString(5, mc);
        }
 
        String tp = entity.getTp();
        if (tp != null) {
            stmt.bindString(6, tp);
        }
 
        String fx = entity.getFx();
        if (fx != null) {
            stmt.bindString(7, fx);
        }
 
        String zz = entity.getZz();
        if (zz != null) {
            stmt.bindString(8, zz);
        }
 
        String fp = entity.getFp();
        if (fp != null) {
            stmt.bindString(9, fp);
        }
        stmt.bindDouble(10, entity.getLat());
        stmt.bindDouble(11, entity.getLng());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Wenxue readEntity(Cursor cursor, int offset) {
        Wenxue entity = new Wenxue( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sj
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ms
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fx
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zz
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fp
            cursor.getDouble(offset + 9), // lat
            cursor.getDouble(offset + 10) // lng
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Wenxue entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSj(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFx(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZz(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLat(cursor.getDouble(offset + 9));
        entity.setLng(cursor.getDouble(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Wenxue entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Wenxue entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Wenxue entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

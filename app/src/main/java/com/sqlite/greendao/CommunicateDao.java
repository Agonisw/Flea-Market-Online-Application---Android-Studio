package com.sqlite.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.exp.sign.Communicate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMUNICATE".
*/
public class CommunicateDao extends AbstractDao<Communicate, Long> {

    public static final String TABLENAME = "COMMUNICATE";

    /**
     * Properties of entity Communicate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property R_id = new Property(1, long.class, "r_id", false, "R_ID");
        public final static Property U_id = new Property(2, long.class, "u_id", false, "U_ID");
        public final static Property Msg = new Property(3, String.class, "msg", false, "MSG");
        public final static Property Read = new Property(4, int.class, "read", false, "READ");
    }


    public CommunicateDao(DaoConfig config) {
        super(config);
    }
    
    public CommunicateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMUNICATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"R_ID\" INTEGER NOT NULL ," + // 1: r_id
                "\"U_ID\" INTEGER NOT NULL ," + // 2: u_id
                "\"MSG\" TEXT," + // 3: msg
                "\"READ\" INTEGER NOT NULL );"); // 4: read
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMUNICATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Communicate entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getR_id());
        stmt.bindLong(3, entity.getU_id());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getRead());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Communicate entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getR_id());
        stmt.bindLong(3, entity.getU_id());
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(4, msg);
        }
        stmt.bindLong(5, entity.getRead());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Communicate readEntity(Cursor cursor, int offset) {
        Communicate entity = new Communicate( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // r_id
            cursor.getLong(offset + 2), // u_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msg
            cursor.getInt(offset + 4) // read
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Communicate entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setR_id(cursor.getLong(offset + 1));
        entity.setU_id(cursor.getLong(offset + 2));
        entity.setMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRead(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Communicate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Communicate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Communicate entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
